<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" 
        xmlns:l="/lib/layout" xmlns:t="/lib/hudson"
      xmlns:dp="/hudson/plugins/view/dashboard">

<style>
td.sTableTop { vertical-align: top; }
.sMessage { white-space: normal; }
</style>

<div id="${it.divId}_alerts" align="left"></div>
<div id="${it.divId}" align="left">Loading issues... <img src="${rootURL}/plugin/mashup-portlets-plugin/ajax-loader-bar.gif" /></div>


<st:include page="console-ie-fallback-js.jelly"/>

<st:bind var="mashupPlugin_${it.id}" value="${it}"/>
<script type="text/javascript"><![CDATA[

new function(divId, rootUrl, ajaxViaJenkins, sonarBase, sonarProjects, sonarFilter, sonarPriorities, 
    sonarPriorityThreshold, maxEntries, deltaDaysForNewIssues, sonarNewIssuesPriorities, 
    prioValueByName, sonarAssigneeStatus, assigneeStatusValueByNameJson, sonarShowAssigneeBar, 
    labelAssigneesRanking, maxAssigneesInRanking, showAlerts, metricsCheckedForAlerts, alwaysShowMetrics, LOGGER) 
{

      var divSelect = "#" + divId;
      
      var userNameLookupTable = {};
      var UNASSIGNED = "unassigned";
      
      var isSonar4 = false;
    
      function getPrioHtmlImg(prio) {
          var imgHtml = '<img src="'+sonarBase+'/images/priority/'+prioValueByName[prio]+'.png" border="0" alt="'+prio+'"/>';
          return imgHtml;        
      }

      function getUserNameForLogin(login) {
          var name = UNASSIGNED;
          if(login) {
              var name = userNameLookupTable[login];
              if(!name) {
                  name = login;
              }
          }
          return name;              
      }
      
      function getUserNameWithLinkForLogin(login) {
          if(login) {
              var componentRoots = sonarProjects.join(",");
              var filterFilter = sonarFilter;
              var sonarSeverities = sonarPriorities.join(",");
          
              var name = getUserNameForLogin(login);
              var search = 'assignees='+login+'|resolved=false|sort=UPDATE_DATE|asc=false|componentRoots='+componentRoots+'|severities='+sonarSeverities;
              // Using query params AND anchor (to work with sonar 4.1-4.3)
              var link = sonarBase+'/issues/search?'+search.replace(/\|/g,'&')+'#'+search;
              var linkHtml = '<a href="'+link+'" target="_blank">'+name+'</a>';
              return linkHtml;              
          } else {
              return UNASSIGNED;
          }
          
      }

      function outputIssue(index, issue) {

         var message = issue.message;
         var component = issue.component;
         // add break opportunities for long java package paths in message/component string
         message = message.replace(/([:./])/g, "<wbr/>$$1");      
         component = component.replace(/([:./])/g, "<wbr/>$$1");  
         
         var issueLink = isSonar4 ? sonarBase + '/issue/show/' + issue.key : sonarBase + '/issues/search#issues=' + issue.key;  
                          
         var assignedColumnHtml = '';
         if(!showOnlyUnassigned()) {
             assignedColumnHtml = '<td class="sTableTop">' + getUserNameWithLinkForLogin(issue.assignee) + '</td>';
         }   
                 
         var rowHtml = '<tr '+(issue.isNew?'bgcolor="#FFFF66"':'')+'><td>'+getPrioHtmlImg([issue.severity])
                  +'</td><td class="sMessage" style="white-space:normal"><a href="'+issueLink+'" target="_blank">'+message+ 
                  "</a><br/>in " + component  +'</td>'
                  + assignedColumnHtml
                  +'<td class="sTableTop">' + issue.creationDate.toISOString().substring(0, 19).replace('T',' <wbr/>') + '</td></tr>';                     
                              
         Q(divSelect+' table:last').append(rowHtml);      

         if(index == maxEntries-1) {
             return false;
         }
      }
      
      function outputIssuesTable(issues, isNew) {
          var colAssigneeHtml = '';          
          if(!showOnlyUnassigned()) {
              colAssigneeHtml = '<th align="left" width="100">Assignee</th>';
          }
          
          var messagesHeader = isNew ? "*NEW* Issues" : "Issues";          
          Q(divSelect).append('<table class="pane bigtable"><tr><th align="left">Prio.</th><th align="left" width="850">'+messagesHeader+'</th>'+colAssigneeHtml+'<th align="left">Created</th></tr>');
          Q.each(issues, outputIssue);
          Q(divSelect).append('</table>');
          if(issues.length>maxEntries) {
              Q(divSelect).append( ('' + issues.length-maxEntries) + ' more validations in <a href="'+sonarBase+'" target="sonar">Sonar</a>');
          }
      }  
    
      function issuesComparator(issueA, issueB) {
          var prioA = prioValueByName[issueA.severity]; 
          var prioB = prioValueByName[issueB.severity];
          if(prioA == prioB) {
              return issueB.creationDate.getTime() - issueA.creationDate.getTime();
          } 
          return prioB - prioA;        
      }
    
      function countPrio(allIssues, prioName) {
          var count = 0;
          Q.each(allIssues, function(index, issue) {
              if(issue.severity == prioName) count++;
          });
          return count;
      }
      
      function getSummary(allIssues) {
          var summary = '';
          Q.each(sonarPriorities, function(index, prio) {
              summary += getPrioHtmlImg(prio) + " " + prio + " " + countPrio(allIssues, prio) + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
          });
          return summary;
      }  
    
      function renderAssigneeBar(allIssues) {
      
          if(!labelAssigneesRanking) {
              labelAssigneesRanking = "Busiest Assignees: ";
          }
          Q(divSelect).append("<strong>"+labelAssigneesRanking+"</strong> ");
          
          var issueCountObjByLogin = {};
          var issueCountObjArr = [];
          Q.each(allIssues, function(index, issue) {
             if(issue.assignee) {
                 if(!issueCountObjByLogin[issue.assignee]) {
                     var issueCountObj = { login: issue.assignee, issueCount: 1 };
                     issueCountObjByLogin[issue.assignee] = issueCountObj;
                     issueCountObjArr.push(issueCountObj);
                 } else {
                     issueCountObjByLogin[issue.assignee].issueCount = issueCountObjByLogin[issue.assignee].issueCount + 1;                      
                 }
             }
          });
          
          issueCountObjArr.sort(function(countObjA, countObjB) { return countObjB.issueCount - countObjA.issueCount;  });
          
          Q.each(issueCountObjArr, function(index, issueCountObj) {
              Q(divSelect).append((index>0 ?', ':'') + '<wbr/>' + getUserNameWithLinkForLogin(issueCountObj.login) + ' ('+issueCountObj.issueCount+')');
              if((index+1) >= maxAssigneesInRanking) {
                 return false;
              }
          });
          
          if(issueCountObjArr.length == 0) {
              Q(divSelect).append('<i>no assignees found</i>');
          }
          
          Q(divSelect).append('<br /><br />');
      }      
    
      function displayIssues(allIssues) {
      
          Q(divSelect).html("");
          
          if(sonarShowAssigneeBar && !showOnlyUnassigned()) {
                renderAssigneeBar(allIssues);
          }
          
          Q(divSelect).append(getSummary(allIssues));
          
          allIssues.sort(issuesComparator);
          var newIssues = [];
          var oldIssues = [];
          
          Q.each(allIssues, function(index, issue) {
              if(issue.isNew) {
                  newIssues.push(issue);
              } else {
                  oldIssues.push(issue);
              }
          });
          
          if(newIssues.length > 0) {
              outputIssuesTable(newIssues, true);
          }
          outputIssuesTable(oldIssues, false);
      }

      function showOnlyUnassigned() {
           return assigneeStatusValueByNameJson['UNASSIGNED'] == sonarAssigneeStatus;
      }    

      function showOnlyAssigned() {
           return assigneeStatusValueByNameJson['ASSIGNED'] == sonarAssigneeStatus;
      }          
    
      function populateUserNameLookupTable(users) {
            if(!users) {
            	return;
            }      
            Q.each(users, function(index, user) { 
                userNameLookupTable[user.login] = user.name;
            });    
      }    
      
      
      
      
      var additionalProjectKeysResponseObject;
      async function projectsSearch() {
      		
      		var filter = sonarFilter.join(",");
      		var projectSearchUrl = sonarBase + "/api/components/search?format=json&qualifiers=TRK&q="+filter;
      	
      	   return new Promise(function(resolves, reject) {
           ajaxViaJenkins(projectSearchUrl, function resolve(resp) { 
                additionalProjectKeysResponseObject = resp;
                resolves(additionalProjectKeysResponseObject);
          	});
       	  });
      }

      
      async function loadIssues() {
          Q(divSelect).append("<br/><br/>Projects:<br/>" + sonarProjects.join('<br/>')+"<br/>"); 
      	  await projectsSearch();
      	  var responseObject = additionalProjectKeysResponseObject.responseObject();
      	   
      	  Q.each(responseObject.components, function(index, issue) {
					    sonarProjects.push(issue.key);
                });	
          
          var sonarSeverities = sonarPriorities.join(",");
          var componentRoots = sonarProjects.join(",");
          
          // adding param additionalFields for Sonar 5.x
          var projectIssuesUrl = sonarBase + "/api/issues/search?format=json&additionalFields=users,languages&pageSize=-1&resolved=false&severities="+sonarSeverities+"&componentRoots=" + componentRoots;
          
          if(showOnlyAssigned()) {
              projectIssuesUrl += "&assigned=true";
          } else if(showOnlyUnassigned()) {
              projectIssuesUrl += "&assigned=false";
          }
          
          ajaxViaJenkins(projectIssuesUrl,  function(resp) {
                var text = resp.responseText;
                
                if(text.substring(0,5) == 'ERROR') {
                     Q(divSelect).html(text);
                     return;
                }        
                var responseObject = resp.responseObject();
                
                if(!responseObject.languages) {
                    // if languages is not a property although explicitly requested via additionalFields => sonar 4
                    isSonar4 = true;
                }

                populateUserNameLookupTable(responseObject.users);
                
                var issueList = [];
                
                var today = new Date();
                Q.each(responseObject.issues, function(index, issue) { 
                    issue.creationDate = new Date(issue.creationDate);         
                    var difference = today.getTime() - issue.creationDate.getTime();
                    var daysDiff = Math.round(difference/(1000*60*60*24));
                    issue.isNew = ((daysDiff <= deltaDaysForNewIssues) && Q.inArray(issue.severity, sonarNewIssuesPriorities)>-1);   
                    

                   	issueList.push(issue);   
                });

                displayIssues(issueList);
          });      
      }

      function ca() {
      	loadIssues();
      }

      Q(document).ready(ca)

      
      // metrics & alerts
      var divAlertsSelect = "#" + divId + "_alerts";
      var metricsAndAlertsToShow = [];

      function showAlertsAndMetrics() {
          
          if(metricsAndAlertsToShow.length == 0) {
          	 Q(divAlertsSelect).html('');
          	 return;
          }            
          
          var showProjectInTbl = sonarProjects.length > 1;
          var tableHtml = '<table class="pane bigtable" style="width:auto"><tr>' + (showProjectInTbl?'<th align="left">Project</th>':'') + '<th align="left">Metric</th><th align="left">Value</th><th align="left">Alert</th></tr>'
          Q.each(metricsAndAlertsToShow, function(i, metric) {
              var alertImgName = metric.alert ? metric.alert.toLowerCase() : 'ok';
              var alertText = metric.alertText ? metric.alertText : '';
              tableHtml += '<tr>' 
              + (showProjectInTbl?'<td align="left">'+metric.project+'</td>':'') 
              + '<td align="left">'+metric.name+'</td><td align="left">'+metric.val+'</td><td><img src="'+sonarBase+'/images/levels/'+alertImgName+'.png" border="0" alt="'+alertImgName+'"/> '+alertText+'</td></tr>';
          });          
          tableHtml += '</table><br/>';
          Q(divAlertsSelect).html(tableHtml);
      
      }

      function loadMetricsForProject(index, sonarProject) {

          var metricsSring = metricsCheckedForAlerts.join(",");
          var projectIssuesUrl = sonarBase + "/api/resources?format=json&verbose=true&includealerts=true&resource=" + sonarProject + "&metrics=" + metricsSring + "";
          
          ajaxViaJenkins(projectIssuesUrl,  function(resp) {
                var text = resp.responseText;
                
                if(text.substring(0,5) == 'ERROR') {
                     Q(divAlertsSelect).html(text);
                     return;
                }        
                var responseObject = resp.responseObject();
                // console.log(responseObject);
                
                Q.each(responseObject, function(i, projectMetrics) {
                    if(projectMetrics.msr) Q.each(projectMetrics.msr, function(i, projectMetric) {
                        if(projectMetric.alert_text || Q.inArray(projectMetric.key, alwaysShowMetrics)!=-1) {
                           metricsAndAlertsToShow.push({
                              'project': projectMetrics.name,
                              'name': projectMetric.name,
                              'val': projectMetric.frmt_val,
                              'alert': projectMetric.alert,
                              'alertText': projectMetric.alert_text
                           });
                        }
                    });                
                });
          
                if(index == sonarProjects.length-1) {
	              showAlertsAndMetrics();
                }  
          });       
      }

      function loadMetrics() {
          Q.each(sonarProjects, loadMetricsForProject);
      }

      if(showAlerts) {
        Q(divAlertsSelect).append('Loading alerts... <img src="'+rootUrl+'/plugin/mashup-portlets-plugin/ajax-loader-bar.gif" />');      
        Q(document).ready(loadMetrics);
      }

}('${it.divId}', 
    '${rootURL}', 
    mashupPlugin_${it.id}.ajaxViaJenkins,
    '${it.sonarBaseUrl}',
    ${it.sonarProjectsJson},
    ${it.sonarFilterJson},
    ${it.sonarPrioritiesJson},
    ${it.sonarPriorityThreshold},
    ${it.maxEntries},
    ${it.deltaDaysForNewIssues},
    ${it.sonarNewIssuesPrioritiesJson},
    ${it.priorityValueByNameJson},
    ${it.sonarAssigneeStatus},
    ${it.assigneeStatusValueByNameJson},
    ${it.isSonarShowAssigneeBar()},
    '${it.labelAssigneesRanking}',
    ${it.maxAssigneesInRanking},
    ${it.showAlerts},
    ${it.metricsCheckedForAlertsJson},
    ${it.alwaysShowMetricsJson}
);

]]></script>

</j:jelly>
