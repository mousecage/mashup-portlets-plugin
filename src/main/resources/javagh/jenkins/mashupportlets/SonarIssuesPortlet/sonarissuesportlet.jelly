<?jelly escape-by-default='true'?>
<j:jelly xmlns:j="jelly:core" xmlns:st="jelly:stapler" 
        xmlns:l="/lib/layout" xmlns:t="/lib/hudson"
      xmlns:dp="/hudson/plugins/view/dashboard">

<style>
td.sTableTop { vertical-align: top; }
.sMessage { white-space: normal; }
</style>

<div id="${it.divId}_alerts" align="left"></div>
<div id="${it.divId}" align="left">Loading issues... <img src="${rootURL}/plugin/mashup-portlets-plugin/ajax-loader-bar.gif" /></div>


<st:include page="console-ie-fallback-js.jelly"/>

<st:bind var="mashupPlugin_${it.id}" value="${it}"/>
<script type="text/javascript"><![CDATA[

new function(divId, rootUrl, ajaxViaJenkins, sonarBase, sonarProjects, sonarFilter, sonarPriorities, 
    sonarPriorityThreshold, maxEntries, deltaDaysForNewIssues, sonarNewIssuesPriorities, 
    prioValueByName, sonarAssigneeStatus, assigneeStatusValueByNameJson, sonarShowAssigneeBar, 
    labelAssigneesRanking, maxAssigneesInRanking, showAlerts, metricsCheckedForAlerts, alwaysShowMetrics) 
{

      var divSelect = "#" + divId;
      
      var userNameLookupTable = {};
      var UNASSIGNED = "unassigned";
      
      var isSonar4 = false;
    
      function getPrioHtmlImg(prio) {
          var imgHtml;
          
          switch(prioValueByName[prio]) {
      		case 0:
      			imgHtml = '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" alt="' + prio + '"><path fill="#4b9fd5" d="M6,0C9.311,0 12,2.689 12,6C12,9.311 9.311,12 6,12C2.689,12 0,9.311 0,6C0,2.689 2.689,0 6,0ZM7,5L5,5L5,10L7,10L7,5ZM7,2L5,2L5,4L7,4L7,2Z"/></svg>'
      			break;
      		case 1:
      			imgHtml = '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" alt="' + prio + '"><path fill="#87bb43" d="M6,0C9.311,0 12,2.689 12,6C12,9.311 9.311,12 6,12C2.689,12 0,9.311 0,6C0,2.689 2.689,0 6,0ZM7,6.586L7,2L5,2L5,6.586L3.107,4.693C3.055,4.644 3.002,4.598 2.942,4.559C2.79,4.461 2.619,4.413 2.44,4.401C2.386,4.4 2.334,4.402 2.28,4.407C2.121,4.431 1.97,4.482 1.836,4.574C1.748,4.634 1.67,4.708 1.605,4.793C1.398,5.064 1.344,5.432 1.464,5.752C1.515,5.887 1.594,6.003 1.693,6.107C2.905,7.319 4.087,8.563 5.331,9.743C5.425,9.823 5.526,9.889 5.642,9.934C5.904,10.034 6.203,10.019 6.454,9.891C6.548,9.843 6.631,9.78 6.707,9.707C7.92,8.495 9.164,7.313 10.344,6.068C10.437,5.959 10.51,5.839 10.553,5.701C10.591,5.583 10.606,5.458 10.598,5.333C10.591,5.227 10.567,5.122 10.526,5.023C10.493,4.941 10.449,4.864 10.395,4.793C10.187,4.522 9.847,4.373 9.507,4.404C9.309,4.423 9.129,4.502 8.972,4.622C8.932,4.656 8.932,4.656 8.893,4.693L7,6.586Z"/></svg>'
      			break;
      		case 2:
      			imgHtml = '<svg width="12px" height="12px"  alt="' + prio + '" viewBox="0 0 12 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xml:space="preserve" style="fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:1.41421;"><path fill="#d4333f" d="M6,0C9.311,0 12,2.689 12,6C12,9.311 9.311,12 6,12C2.689,12 0,9.311 0,6C0,2.689 2.689,0 6,0ZM6.08,2.903C6.151,2.911 6.22,2.922 6.288,2.942C6.426,2.984 6.548,3.056 6.658,3.147C7.902,4.293 9.084,5.504 10.297,6.683C10.397,6.786 10.478,6.901 10.531,7.035C10.576,7.151 10.6,7.275 10.6,7.399C10.6,7.524 10.577,7.648 10.532,7.763C10.493,7.863 10.438,7.956 10.37,8.038C10.129,8.33 9.732,8.461 9.363,8.372C9.188,8.329 9.035,8.239 8.903,8.117L6,5.295L3.097,8.117C3.058,8.153 3.058,8.153 3.017,8.187C2.902,8.273 2.777,8.337 2.637,8.372C2.516,8.401 2.39,8.408 2.267,8.391C1.928,8.345 1.63,8.124 1.489,7.813C1.452,7.732 1.427,7.646 1.413,7.558C1.396,7.453 1.396,7.345 1.413,7.24C1.445,7.044 1.535,6.87 1.666,6.721C2.847,5.51 4.09,4.362 5.303,3.183C5.355,3.135 5.409,3.09 5.47,3.052C5.623,2.956 5.794,2.91 5.973,2.9C6.027,2.9 6.027,2.9 6.08,2.903Z"/></svg>'
      			break;
      		case 3:
      			imgHtml = '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" alt="' + prio + '"><path fill="#d4333f" d="M6,0C9.311,0 12,2.689 12,6C12,9.311 9.311,12 6,12C2.689,12 0,9.311 0,6C0,2.689 2.689,0 6,0ZM7,10L7,5.414L8.893,7.307C9.023,7.431 9.175,7.523 9.35,7.568C9.717,7.663 10.116,7.537 10.361,7.248C10.43,7.167 10.486,7.075 10.526,6.977C10.573,6.861 10.598,6.738 10.6,6.613C10.602,6.489 10.58,6.365 10.536,6.248C10.485,6.113 10.406,5.997 10.307,5.893C9.095,4.681 7.913,3.437 6.669,2.257C6.616,2.211 6.561,2.169 6.5,2.134C6.362,2.054 6.211,2.014 6.052,2.001C6,2 6,2 5.948,2.001C5.772,2.015 5.604,2.065 5.455,2.161C5.396,2.2 5.344,2.245 5.293,2.293C4.08,3.505 2.836,4.687 1.656,5.932C1.563,6.041 1.49,6.161 1.447,6.299C1.409,6.417 1.394,6.542 1.402,6.667C1.409,6.773 1.433,6.878 1.474,6.977C1.507,7.059 1.551,7.136 1.605,7.207C1.813,7.478 2.153,7.627 2.493,7.596C2.691,7.577 2.871,7.498 3.028,7.378C3.069,7.343 3.068,7.344 3.107,7.307L5,5.414L5,10L7,10Z"/></svg>'
      			break;
      		case 4:
      			imgHtml = '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" alt="' + prio + '"><g transform="matrix(-1,1.22465e-16,-1.22465e-16,-1,12,12)"><path fill="#d4333f" d="M6,0C9.311,0 12,2.689 12,6C12,9.311 9.311,12 6,12C2.689,12 0,9.311 0,6C0,2.689 2.689,0 6,0ZM7,5L5,5L5,10L7,10L7,5ZM7,2L5,2L5,4L7,4L7,2Z"/></g></svg>'
      			break;
      		case 5:
      			imgHtml = '<svg xmlns="http://www.w3.org/2000/svg" width="12" height="12" alt="' + prio + '"><path fill="#87bb43" d="M6,0C9.311,0 12,2.689 12,6C12,9.311 9.311,12 6,12C2.689,12 0,9.311 0,6C0,2.689 2.689,0 6,0ZM7,6.586L7,2L5,2L5,6.586L3.107,4.693C3.055,4.644 3.002,4.598 2.942,4.559C2.79,4.461 2.619,4.413 2.44,4.401C2.386,4.4 2.334,4.402 2.28,4.407C2.121,4.431 1.97,4.482 1.836,4.574C1.748,4.634 1.67,4.708 1.605,4.793C1.398,5.064 1.344,5.432 1.464,5.752C1.515,5.887 1.594,6.003 1.693,6.107C2.905,7.319 4.087,8.563 5.331,9.743C5.425,9.823 5.526,9.889 5.642,9.934C5.904,10.034 6.203,10.019 6.454,9.891C6.548,9.843 6.631,9.78 6.707,9.707C7.92,8.495 9.164,7.313 10.344,6.068C10.437,5.959 10.51,5.839 10.553,5.701C10.591,5.583 10.606,5.458 10.598,5.333C10.591,5.227 10.567,5.122 10.526,5.023C10.493,4.941 10.449,4.864 10.395,4.793C10.187,4.522 9.847,4.373 9.507,4.404C9.309,4.423 9.129,4.502 8.972,4.622C8.932,4.656 8.932,4.656 8.893,4.693L7,6.586Z"/></svg>'
      			break;
      	}
          
          return imgHtml;        
      }

      function getUserNameForLogin(login) {
          var name = UNASSIGNED;
          if(login) {
              var name = userNameLookupTable[login];
              if(!name) {
                  name = login;
              }
          }
          return name;              
      }
      
      function getUserNameWithLinkForLogin(login) {
          if(login) {
              var componentRoots = sonarProjects.join(",");
              var filterFilter = sonarFilter;
              var sonarSeverities = sonarPriorities.join(",");
          
              var name = getUserNameForLogin(login);
              var search = 'assignees='+login+'|resolved=false|sort=UPDATE_DATE|asc=false|componentRoots='+componentRoots+'|severities='+sonarSeverities;
              // Using query params AND anchor (to work with sonar 4.1-4.3)
              var link = sonarBase+'/issues/search?'+search.replace(/\|/g,'&')+'#'+search;
              var linkHtml = '<a href="'+link+'" target="_blank">'+name+'</a>';
              return linkHtml;              
          } else {
              return UNASSIGNED;
          }
          
      }

      function outputIssue(index, issue) {

         var message = issue.message;
         var component = issue.component;
         // add break opportunities for long java package paths in message/component string
         message = message.replace(/([:./])/g, "<wbr/>$$1");      
         component = component.replace(/([:./])/g, "<wbr/>$$1");  
         
         var issueLink = isSonar4 ? sonarBase + '/issue/show/' + issue.key : sonarBase + '/issues/search#issues=' + issue.key;  
                          
         var assignedColumnHtml = '';
         if(!showOnlyUnassigned()) {
             assignedColumnHtml = '<td class="sTableTop">' + getUserNameWithLinkForLogin(issue.assignee) + '</td>';
         }   
                 
         var rowHtml = '<tr '+(issue.isNew?'bgcolor="#FFFF66"':'')+'><td>'+getPrioHtmlImg([issue.severity])
                  +'</td><td class="sMessage" style="white-space:normal"><a href="'+issueLink+'" target="_blank">'+message+ 
                  "</a><br/>in " + component  +'</td>'
                  + assignedColumnHtml
                  +'<td class="sTableTop">' + issue.creationDate.toISOString().substring(0, 19).replace('T',' <wbr/>') + '</td></tr>';                     
                              
         Q(divSelect+' table:last').append(rowHtml);      

         if(index == maxEntries-1) {
             return false;
         }
      }
      
      function outputIssuesTable(issues, isNew) {
          var colAssigneeHtml = '';          
          if(!showOnlyUnassigned()) {
              colAssigneeHtml = '<th align="left" width="100">Assignee</th>';
          }
          
          var messagesHeader = isNew ? "*NEW* Issues" : "Issues";          
          Q(divSelect).append('<table class="pane bigtable"><tr><th align="left">Prio.</th><th align="left" width="850">'+messagesHeader+'</th>'+colAssigneeHtml+'<th align="left">Created</th></tr>');
          Q.each(issues, outputIssue);
          Q(divSelect).append('</table>');
          if(issues.length>maxEntries) {
              Q(divSelect).append( ('' + issues.length-maxEntries) + ' more validations in <a href="'+sonarBase+'" target="sonar">Sonar</a>');
          }
      }  
    
      function issuesComparator(issueA, issueB) {
          var prioA = prioValueByName[issueA.severity]; 
          var prioB = prioValueByName[issueB.severity];
          if(prioA == prioB) {
              return issueB.creationDate.getTime() - issueA.creationDate.getTime();
          } 
          return prioB - prioA;        
      }
    
      function countPrio(allIssues, prioName) {
          var count = 0;
          Q.each(allIssues, function(index, issue) {
              if(issue.severity == prioName) count++;
          });
          return count;
      }
      
      function getSummary(allIssues) {
          var summary = '';
          Q.each(sonarPriorities, function(index, prio) {
              summary += getPrioHtmlImg(prio) + " " + prio + " " + countPrio(allIssues, prio) + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;";
          });
          return summary;
      }  
    
      function renderAssigneeBar(allIssues) {
      
          if(!labelAssigneesRanking) {
              labelAssigneesRanking = "Busiest Assignees: ";
          }
          Q(divSelect).append("<strong>"+labelAssigneesRanking+"</strong> ");
          
          var issueCountObjByLogin = {};
          var issueCountObjArr = [];
          Q.each(allIssues, function(index, issue) {
             if(issue.assignee) {
                 if(!issueCountObjByLogin[issue.assignee]) {
                     var issueCountObj = { login: issue.assignee, issueCount: 1 };
                     issueCountObjByLogin[issue.assignee] = issueCountObj;
                     issueCountObjArr.push(issueCountObj);
                 } else {
                     issueCountObjByLogin[issue.assignee].issueCount = issueCountObjByLogin[issue.assignee].issueCount + 1;                      
                 }
             }
          });
          
          issueCountObjArr.sort(function(countObjA, countObjB) { return countObjB.issueCount - countObjA.issueCount;  });
          
          Q.each(issueCountObjArr, function(index, issueCountObj) {
              Q(divSelect).append((index>0 ?', ':'') + '<wbr/>' + getUserNameWithLinkForLogin(issueCountObj.login) + ' ('+issueCountObj.issueCount+')');
              if((index+1) >= maxAssigneesInRanking) {
                 return false;
              }
          });
          
          if(issueCountObjArr.length == 0) {
              Q(divSelect).append('<i>no assignees found</i>');
          }
          
          Q(divSelect).append('<br /><br />');
      }      
    
      function displayIssues(allIssues) {
      
          Q(divSelect).html("");
          
          if(sonarShowAssigneeBar && !showOnlyUnassigned()) {
                renderAssigneeBar(allIssues);
          }
          
          Q(divSelect).append(getSummary(allIssues));
          
          allIssues.sort(issuesComparator);
          var newIssues = [];
          var oldIssues = [];
          
          Q.each(allIssues, function(index, issue) {
              if(issue.isNew) {
                  newIssues.push(issue);
              } else {
                  oldIssues.push(issue);
              }
          });
          
          if(newIssues.length > 0) {
              outputIssuesTable(newIssues, true);
          }
          outputIssuesTable(oldIssues, false);
      }

      function showOnlyUnassigned() {
           return assigneeStatusValueByNameJson['UNASSIGNED'] == sonarAssigneeStatus;
      }    

      function showOnlyAssigned() {
           return assigneeStatusValueByNameJson['ASSIGNED'] == sonarAssigneeStatus;
      }          
    
      function populateUserNameLookupTable(users) {
            if(!users) {
            	return;
            }      
            Q.each(users, function(index, user) { 
                userNameLookupTable[user.login] = user.name;
            });    
      }    
      
      
      
      
      var additionalProjectKeysResponseObject;
      async function projectsSearch() {
      		
      		var filter = sonarFilter.join(",");
      		var projectSearchUrl = sonarBase + "/api/components/search?format=json&qualifiers=TRK&q="+filter;
      	
      	   return new Promise(function(resolves, reject) {
           ajaxViaJenkins(projectSearchUrl, function resolve(resp) { 
                additionalProjectKeysResponseObject = resp;
                resolves(additionalProjectKeysResponseObject);
          	});
       	  });
      }

      
      async function loadIssues() {
          Q(divSelect).append("<br/><br/>Projects:<br/>" + sonarProjects.join('<br/>')+"<br/>"); 
      	  await projectsSearch();
      	  var responseObject = additionalProjectKeysResponseObject.responseObject();
      	   
      	  Q.each(responseObject.components, function(index, issue) {
					    sonarProjects.push(issue.key);
                });	
          
          var sonarSeverities = sonarPriorities.join(",");
          var componentRoots = sonarProjects.join(",");
          
          // adding param additionalFields for Sonar 5.x
          var projectIssuesUrl = sonarBase + "/api/issues/search?format=json&additionalFields=users,languages&pageSize=-1&resolved=false&severities="+sonarSeverities+"&componentRoots=" + componentRoots;
          
          if(showOnlyAssigned()) {
              projectIssuesUrl += "&assigned=true";
          } else if(showOnlyUnassigned()) {
              projectIssuesUrl += "&assigned=false";
          }
          
          ajaxViaJenkins(projectIssuesUrl,  function(resp) {
                var text = resp.responseText;
                
                if(text.substring(0,5) == 'ERROR') {
                     Q(divSelect).html(text);
                     return;
                }        
                var responseObject = resp.responseObject();
                
                if(!responseObject.languages) {
                    // if languages is not a property although explicitly requested via additionalFields => sonar 4
                    isSonar4 = true;
                }

                populateUserNameLookupTable(responseObject.users);
                
                var issueList = [];
                
                var today = new Date();
                Q.each(responseObject.issues, function(index, issue) { 
                    issue.creationDate = new Date(issue.creationDate);         
                    var difference = today.getTime() - issue.creationDate.getTime();
                    var daysDiff = Math.round(difference/(1000*60*60*24));
                    issue.isNew = ((daysDiff <= deltaDaysForNewIssues) && Q.inArray(issue.severity, sonarNewIssuesPriorities)>-1);   
                    

                   	issueList.push(issue);   
                });

                displayIssues(issueList);
          });      
      }

      function ca() {
      	loadIssues();
      }

      Q(document).ready(ca)

      
      // metrics & alerts
      var divAlertsSelect = "#" + divId + "_alerts";
      var metricsAndAlertsToShow = [];

      function showAlertsAndMetrics() {
          
          if(metricsAndAlertsToShow.length == 0) {
          	 Q(divAlertsSelect).html('');
          	 return;
          }            
          
          var showProjectInTbl = sonarProjects.length > 1;
          var tableHtml = '<table class="pane bigtable" style="width:auto"><tr>' + (showProjectInTbl?'<th align="left">Project</th>':'') + '<th align="left">Metric</th><th align="left">Value</th><th align="left">Alert</th></tr>'
          Q.each(metricsAndAlertsToShow, function(i, metric) {
              var alertImgName = metric.alert ? metric.alert.toLowerCase() : 'ok';
              var alertText = metric.alertText ? metric.alertText : '';
              tableHtml += '<tr>' 
              + (showProjectInTbl?'<td align="left">'+metric.project+'</td>':'') 
              + '<td align="left">'+metric.name+'</td><td align="left">'+metric.val+'</td><td><img src="'+sonarBase+'/images/levels/'+alertImgName+'.png" border="0" alt="'+alertImgName+'"/> '+alertText+'</td></tr>';
          });          
          tableHtml += '</table><br/>';
          Q(divAlertsSelect).html(tableHtml);
      
      }

      function loadMetricsForProject(index, sonarProject) {

          var metricsSring = metricsCheckedForAlerts.join(",");
          var projectIssuesUrl = sonarBase + "/api/resources?format=json&verbose=true&includealerts=true&resource=" + sonarProject + "&metrics=" + metricsSring + "";
          
          ajaxViaJenkins(projectIssuesUrl,  function(resp) {
                var text = resp.responseText;
                
                if(text.substring(0,5) == 'ERROR') {
                     Q(divAlertsSelect).html(text);
                     return;
                }        
                var responseObject = resp.responseObject();
                // console.log(responseObject);
                
                Q.each(responseObject, function(i, projectMetrics) {
                    if(projectMetrics.msr) Q.each(projectMetrics.msr, function(i, projectMetric) {
                        if(projectMetric.alert_text || Q.inArray(projectMetric.key, alwaysShowMetrics)!=-1) {
                           metricsAndAlertsToShow.push({
                              'project': projectMetrics.name,
                              'name': projectMetric.name,
                              'val': projectMetric.frmt_val,
                              'alert': projectMetric.alert,
                              'alertText': projectMetric.alert_text
                           });
                        }
                    });                
                });
          
                if(index == sonarProjects.length-1) {
	              showAlertsAndMetrics();
                }  
          });       
      }

      function loadMetrics() {
          Q.each(sonarProjects, loadMetricsForProject);
      }

      if(showAlerts) {
        Q(divAlertsSelect).append('Loading alerts... <img src="'+rootUrl+'/plugin/mashup-portlets-plugin/ajax-loader-bar.gif" />');      
        Q(document).ready(loadMetrics);
      }

}('${it.divId}', 
    '${rootURL}', 
    mashupPlugin_${it.id}.ajaxViaJenkins,
    '${it.sonarBaseUrl}',
    ${it.sonarProjectsJson},
    ${it.sonarFilterJson},
    ${it.sonarPrioritiesJson},
    ${it.sonarPriorityThreshold},
    ${it.maxEntries},
    ${it.deltaDaysForNewIssues},
    ${it.sonarNewIssuesPrioritiesJson},
    ${it.priorityValueByNameJson},
    ${it.sonarAssigneeStatus},
    ${it.assigneeStatusValueByNameJson},
    ${it.isSonarShowAssigneeBar()},
    '${it.labelAssigneesRanking}',
    ${it.maxAssigneesInRanking},
    ${it.showAlerts},
    ${it.metricsCheckedForAlertsJson},
    ${it.alwaysShowMetricsJson}
);

]]></script>

</j:jelly>
